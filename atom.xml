<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>沒有人的文庫</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://pei-lun.github.io/blog/"/>
  <updated>2017-08-08T03:38:49.000Z</updated>
  <id>https://pei-lun.github.io/blog/</id>
  
  <author>
    <name>Pei-Lun H.</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Use GNU Utilities on macOS</title>
    <link href="https://pei-lun.github.io/blog/2017/06/21/Use-GNU-Utilities-on-macOS/"/>
    <id>https://pei-lun.github.io/blog/2017/06/21/Use-GNU-Utilities-on-macOS/</id>
    <published>2017-06-21T04:05:05.000Z</published>
    <updated>2017-08-08T03:38:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Some commands are identical on macOS and GNU/Linux, but they behave differently, e.g., <code>readlink</code> and <code>sed</code>. We can install GNU version commands via <a href="https://brew.sh" target="_blank" rel="external">Homebrew</a>, all commands are installed with the prefix <code>g</code> by default, e.g., <code>greadlink</code> and <code>gsed</code>.</p>
<p><code>brew install coreutils</code> provides:</p>
<ul>
<li><code>greadlink</code></li>
<li><code>grealpath</code></li>
<li>etc.</li>
</ul>
<p><code>brew install gnu-sed</code> provides: <code>gsed</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Some commands are identical on macOS and GNU/Linux, but they behave differently, e.g., &lt;code&gt;readlink&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt;. We can
    
    </summary>
    
    
      <category term="macOS" scheme="https://pei-lun.github.io/blog/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Use flock to Ensure Only One Instance of a Shell Script Is Running</title>
    <link href="https://pei-lun.github.io/blog/2017/02/16/Use-flock-to-Ensure-Only-One-Instance-of-a-Shell-Script-Is-Running/"/>
    <id>https://pei-lun.github.io/blog/2017/02/16/Use-flock-to-Ensure-Only-One-Instance-of-a-Shell-Script-Is-Running/</id>
    <published>2017-02-16T10:00:05.000Z</published>
    <updated>2017-08-08T03:34:13.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"></div><div class="line">script=$(realpath <span class="string">"<span class="variable">$0</span>"</span>)</div><div class="line">lock_file=<span class="string">"<span class="variable">$&#123;script%.*&#125;</span>.lock"</span></div><div class="line">(</div><div class="line">  flock -n 9 || <span class="built_in">exit</span> 1</div><div class="line">  sleep 10 &amp;&amp; <span class="built_in">echo</span> <span class="string">'Done!'</span></div><div class="line">) 9&gt; <span class="string">"<span class="variable">$lock_file</span>"</span> &amp;&amp; rm <span class="string">"<span class="variable">$lock_file</span>"</span></div></pre></td></tr></table></figure>
<p>References:</p>
<ul>
<li>Unix manual <em>flock(1)</em></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
    
    </summary>
    
    
      <category term="Bash" scheme="https://pei-lun.github.io/blog/tags/Bash/"/>
    
      <category term="Shell Script" scheme="https://pei-lun.github.io/blog/tags/Shell-Script/"/>
    
  </entry>
  
  <entry>
    <title>Use fcntl.flock to Ensure Only One Instance of a Python Script Is Running</title>
    <link href="https://pei-lun.github.io/blog/2017/02/09/Use-fcntl-flock-to-Ensure-Only-One-Instance-of-a-Python-Script-Is-Running/"/>
    <id>https://pei-lun.github.io/blog/2017/02/09/Use-fcntl-flock-to-Ensure-Only-One-Instance-of-a-Python-Script-Is-Running/</id>
    <published>2017-02-08T20:51:18.000Z</published>
    <updated>2017-08-14T06:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="keyword">import</span> fcntl</div><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> remove</div><div class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> splitext</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    lock_file = <span class="string">'&#123;&#125;.lock'</span>.format(splitext(__file__)[<span class="number">0</span>])</div><div class="line">    <span class="keyword">with</span> open(lock_file, <span class="string">'w'</span>) <span class="keyword">as</span> lock_fp:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            fcntl.flock(lock_fp, fcntl.LOCK_EX | fcntl.LOCK_NB)</div><div class="line">        <span class="keyword">except</span> IOError:</div><div class="line">            print(<span class="string">'Script has been running.'</span>)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'Script starts to run.'</span>)</div><div class="line">            sleep(<span class="number">10</span>)</div><div class="line">            print(<span class="string">'Done!'</span>)</div><div class="line">    remove(lock_file)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<p>Note that this code doesn’t works on Windows.</p>
<p>References:</p>
<ul>
<li><a href="https://docs.python.org/3/library/fcntl.html#fcntl.flock" target="_blank" rel="external">https://docs.python.org/3/library/fcntl.html#fcntl.flock</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/d
    
    </summary>
    
    
      <category term="Python 3" scheme="https://pei-lun.github.io/blog/tags/Python-3/"/>
    
  </entry>
  
  <entry>
    <title>Fork 的工作流程</title>
    <link href="https://pei-lun.github.io/blog/2016/06/11/My-Workflow-for-a-Fork/"/>
    <id>https://pei-lun.github.io/blog/2016/06/11/My-Workflow-for-a-Fork/</id>
    <published>2016-06-11T08:51:19.000Z</published>
    <updated>2017-08-01T02:32:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>習慣上我會保持 fork 的 master 和原始 repository 的 master 同步，並且不會直接 commit 自己的變更到該分支。</p>
<h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><p>首先為 fork 設定原始 repository 的 remote：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add upstream &lt;remote URL to original repository&gt;</div></pre></td></tr></table></figure>
<p>完成後輸入 <code>git remote -v</code> 應該會看到 origin 和 upstream。</p>
<p>然後再從 master 建立新的分支：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b &lt;my changes&gt;</div></pre></td></tr></table></figure>
<p>此後所有變更都 commit 到該分支上。</p>
<h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>執行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout master</div><div class="line">git fetch upstream</div><div class="line">git merge upstream/master</div></pre></td></tr></table></figure>
<p>或是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout master</div><div class="line">git pull upstream master</div></pre></td></tr></table></figure>
<p>以同步 fork 的 master 分支。然後再執行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout &lt;my changes&gt;</div><div class="line">git merge master</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;習慣上我會保持 fork 的 master 和原始 repository 的 master 同步，並且不會直接 commit 自己的變更到該分支。&lt;/p&gt;
&lt;h2 id=&quot;設定&quot;&gt;&lt;a href=&quot;#設定&quot; class=&quot;headerlink&quot; title=&quot;設定&quot;&gt;&lt;/a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python 不安裝額外套件轉換時區</title>
    <link href="https://pei-lun.github.io/blog/2016/05/01/Convert-Timezone-in-Python-without-Installing-Packages/"/>
    <id>https://pei-lun.github.io/blog/2016/05/01/Convert-Timezone-in-Python-without-Installing-Packages/</id>
    <published>2016-05-01T04:02:52.000Z</published>
    <updated>2017-08-01T02:32:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h1><p>將符合 ISO 8601 格式的 <em>1987-09-12T09:12:00+08:00</em> 字串轉換成 UTC 時區的 datetime.datetime 物件。</p>
<h1 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h1><h2 id="Python-3"><a href="#Python-3" class="headerlink" title="Python 3"></a>Python 3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timezone</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    dt_format = <span class="string">'%Y-%m-%dT%H:%M:%S%z'</span></div><div class="line">    dt_str = <span class="string">'1987-09-12T09:12:00+08:00'</span></div><div class="line"></div><div class="line">    dt = datetime.strptime(dt_str.replace(<span class="string">'+08:00'</span>, <span class="string">'+0800'</span>), dt_format)</div><div class="line">    utc_dt = dt.astimezone(timezone.utc)</div><div class="line"></div><div class="line">    print(dt)  <span class="comment"># 1987-09-12 09:12:00+08:00</span></div><div class="line">    print(utc_dt)  <span class="comment"># 1987-09-12 01:12:00+00:00</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<h2 id="Python-2"><a href="#Python-2" class="headerlink" title="Python 2"></a>Python 2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta, tzinfo</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UTC</span><span class="params">(tzinfo)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">utcoffset</span><span class="params">(self, dt)</span>:</span></div><div class="line">        <span class="keyword">return</span> timedelta(<span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tzname</span><span class="params">(self, dt)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'UTC'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dst</span><span class="params">(self, dt)</span>:</span></div><div class="line">        <span class="keyword">return</span> timedelta(<span class="number">0</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GMT8</span><span class="params">(tzinfo)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dst</span><span class="params">(self, dt)</span>:</span></div><div class="line">        <span class="keyword">return</span> timedelta(<span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tzname</span><span class="params">(self, dt)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'GMT +8'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">utcoffset</span><span class="params">(self, dt)</span>:</span></div><div class="line">        <span class="keyword">return</span> timedelta(hours=<span class="number">8</span>) + self.dst(dt)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    dt_format = <span class="string">'%Y-%m-%dT%H:%M:%S'</span></div><div class="line">    dt_str = <span class="string">'1987-09-12T09:12:00+08:00'</span></div><div class="line"></div><div class="line">    naive_dt = datetime.strptime(dt_str.replace(<span class="string">'+08:00'</span>, <span class="string">''</span>), dt_format)</div><div class="line">    dt = naive_dt.replace(tzinfo=GMT8())</div><div class="line">    utc_dt = dt.astimezone(UTC())</div><div class="line"></div><div class="line">    print(dt)  <span class="comment"># 1987-09-12 09:12:00+08:00</span></div><div class="line">    print(utc_dt)  <span class="comment"># 1987-09-12 01:12:00+00:00</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;目標&quot;&gt;&lt;a href=&quot;#目標&quot; class=&quot;headerlink&quot; title=&quot;目標&quot;&gt;&lt;/a&gt;目標&lt;/h1&gt;&lt;p&gt;將符合 ISO 8601 格式的 &lt;em&gt;1987-09-12T09:12:00+08:00&lt;/em&gt; 字串轉換成 UTC 時區的 date
    
    </summary>
    
    
      <category term="Python 2" scheme="https://pei-lun.github.io/blog/tags/Python-2/"/>
    
      <category term="Python 3" scheme="https://pei-lun.github.io/blog/tags/Python-3/"/>
    
  </entry>
  
  <entry>
    <title>建立可用於 AWS Lambda 的 Python 部署套件</title>
    <link href="https://pei-lun.github.io/blog/2015/12/21/Creating-a-Python-Deployment-Package-for-AWS-Lambda/"/>
    <id>https://pei-lun.github.io/blog/2015/12/21/Creating-a-Python-Deployment-Package-for-AWS-Lambda/</id>
    <published>2015-12-21T06:41:46.000Z</published>
    <updated>2017-08-01T02:32:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>這篇主要是紀錄實作 AWS Lambda 開發者文件 <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html" target="_blank" rel="external">Creating a Deployment Package (Python)</a> 的步驟，同時還參考了 <a href="http://www.perrygeo.com/running-python-with-compiled-code-on-aws-lambda.html" target="_blank" rel="external">Running Python with compiled code on AWS Lambda</a> 這篇文章。</p>
<h1 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h1><h2 id="開個跑-Amazon-Linux-AMI-的-EC2-instance"><a href="#開個跑-Amazon-Linux-AMI-的-EC2-instance" class="headerlink" title="開個跑 Amazon Linux AMI 的 EC2 instance"></a>開個跑 Amazon Linux AMI 的 EC2 instance</h2><p>AWS lambda 的執行環境基本上就是 Amazon Linux AMI，因為使用同樣環境下編譯的套件比較容易成功，所以我們首先要開個跑 Amazon Linux AMI 的 EC2 instance。</p>
<h2 id="安裝編譯-lxml-所需要的套件"><a href="#安裝編譯-lxml-所需要的套件" class="headerlink" title="安裝編譯 lxml 所需要的套件"></a>安裝編譯 lxml 所需要的套件</h2><p>ssh 進剛剛開好的 EC2 instance 並安裝套件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install gcc libxml2-devel libxslt-devel</div></pre></td></tr></table></figure>
<h2 id="在虛擬環境安裝-lxml"><a href="#在虛擬環境安裝-lxml" class="headerlink" title="在虛擬環境安裝 lxml"></a>在虛擬環境安裝 lxml</h2><p>Amazon Linux AMI 預設的 python 環境已經裝了很多不必要的套件，因此我們需要用 virtualenv 建立乾淨的虛擬環境：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python -m virtualenv path/to/my/virtual-env</div></pre></td></tr></table></figure>
<p>建立好之後啟動虛擬環境：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ source path/to/my/virtual-env/bin/activate</div></pre></td></tr></table></figure>
<p>安裝 lxml:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python -m pip install lxml</div></pre></td></tr></table></figure>
<h2 id="打包-lambda-程式"><a href="#打包-lambda-程式" class="headerlink" title="打包 lambda 程式"></a>打包 lambda 程式</h2><p>假設用到 lxml 的 lambda 程式放在 <code>path/to/my/project</code> 下，先切換到該目錄再打包成 zip 檔：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd path/to/my/project</div><div class="line">$ zip -9r bundle.zip *</div></pre></td></tr></table></figure>
<p>然後再切換到該虛擬環境放置套件的目錄，並打包進剛剛的 zip 檔：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cd $VIRTUAL_ENV/lib/python2.7/site-packages</div><div class="line">$ zip -9r path/to/my/project/bundle.zip *</div><div class="line">$ cd $VIRTUAL_ENV/lib64/python2.7/site-packages</div><div class="line">$ zip -9r path/to/my/project/bundle.zip *</div></pre></td></tr></table></figure>
<h2 id="發佈"><a href="#發佈" class="headerlink" title="發佈"></a>發佈</h2><p>最後只要上傳 <code>path/to/my/project/bundle.zip</code> 到 AWS Lambda 去就完成了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;這篇主要是紀錄實作 AWS Lambda 開發者文件 &lt;a href=&quot;http://docs.aws.amazon.com/lambda/
    
    </summary>
    
    
      <category term="Python 2" scheme="https://pei-lun.github.io/blog/tags/Python-2/"/>
    
      <category term="AWS" scheme="https://pei-lun.github.io/blog/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>令 Atom 顯示合字</title>
    <link href="https://pei-lun.github.io/blog/2015/12/13/Make-Atom-Render-Ligatures/"/>
    <id>https://pei-lun.github.io/blog/2015/12/13/Make-Atom-Render-Ligatures/</id>
    <published>2015-12-12T16:01:10.000Z</published>
    <updated>2017-08-01T02:32:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>有些字型如 <a href="https://github.com/i-tu/Hasklig" target="_blank" rel="external">Hasklig</a>、<a href="https://github.com/tonsky/FiraCode" target="_blank" rel="external">Fira Code</a> 和 <a href="http://larsenwork.com/monoid/" target="_blank" rel="external">Monoid</a> 有專為程式語言設計的合字（ligature），可以讓程式碼更好閱讀。</p>
<p>要讓 Atom 顯示這些合字，除了設定使用這種字型外，還得在 <code>~/.atom/styles.less</code>（*nix）或是 <code>%USERPROFILE%\.atom\styles.less</code>（Windows）內加入樣式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.editor &#123;</div><div class="line">  text-rendering: optimizeLegibility;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>註：可以從選單列 <em>Atom &gt; Open Your Stylesheet</em>（*nix）或是 <em>File &gt; Open Your Stylesheet</em>（Windows）快速開啟這個檔案。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有些字型如 &lt;a href=&quot;https://github.com/i-tu/Hasklig&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hasklig&lt;/a&gt;、&lt;a href=&quot;https://github.com/tonsky/FiraCode&quot; t
    
    </summary>
    
    
      <category term="Atom" scheme="https://pei-lun.github.io/blog/tags/Atom/"/>
    
  </entry>
  
</feed>
